{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=1\n",
    "x**2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is an example from simpy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bank renege\n",
      " 0.0000 Customer00: Here I am\n",
      " 0.0000 Customer00: Waited  0.000\n",
      " 3.8595 Customer00: Finished\n",
      "10.2006 Customer01: Here I am\n",
      "10.2006 Customer01: Waited  0.000\n",
      "12.7265 Customer02: Here I am\n",
      "13.9003 Customer02: RENEGED after  1.174\n",
      "23.7507 Customer01: Finished\n",
      "34.9993 Customer03: Here I am\n",
      "34.9993 Customer03: Waited  0.000\n",
      "37.9599 Customer03: Finished\n",
      "40.4798 Customer04: Here I am\n",
      "40.4798 Customer04: Waited  0.000\n",
      "43.1401 Customer04: Finished\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Bank renege example\n",
    "\n",
    "Covers:\n",
    "\n",
    "- Resources: Resource\n",
    "- Condition events\n",
    "\n",
    "Scenario:\n",
    "  A counter with a random service time and customers who renege. Based on the\n",
    "  program bank08.py from TheBank tutorial of SimPy 2. (KGM)\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "import random\n",
    "\n",
    "import simpy\n",
    "\n",
    "RANDOM_SEED = 42\n",
    "NEW_CUSTOMERS = 5  # Total number of customers\n",
    "INTERVAL_CUSTOMERS = 10.0  # Generate new customers roughly every x seconds\n",
    "MIN_PATIENCE = 1  # Min. customer patience\n",
    "MAX_PATIENCE = 3  # Max. customer patience\n",
    "\n",
    "\n",
    "def source(env, number, interval, counter):\n",
    "    \"\"\"Source generates customers randomly\"\"\"\n",
    "    for i in range(number):\n",
    "        c = customer(env, f'Customer{i:02d}', counter, time_in_bank=12.0)\n",
    "        env.process(c)\n",
    "        t = random.expovariate(1.0 / interval)\n",
    "        yield env.timeout(t)\n",
    "\n",
    "\n",
    "def customer(env, name, counter, time_in_bank):\n",
    "    \"\"\"Customer arrives, is served and leaves.\"\"\"\n",
    "    arrive = env.now\n",
    "    print(f'{arrive:7.4f} {name}: Here I am')\n",
    "\n",
    "    with counter.request() as req:\n",
    "        patience = random.uniform(MIN_PATIENCE, MAX_PATIENCE)\n",
    "        # Wait for the counter or abort at the end of our tether\n",
    "        results = yield req | env.timeout(patience)\n",
    "\n",
    "        wait = env.now - arrive\n",
    "\n",
    "        if req in results:\n",
    "            # We got to the counter\n",
    "            print(f'{env.now:7.4f} {name}: Waited {wait:6.3f}')\n",
    "\n",
    "            tib = random.expovariate(1.0 / time_in_bank)\n",
    "            yield env.timeout(tib)\n",
    "            print(f'{env.now:7.4f} {name}: Finished')\n",
    "\n",
    "        else:\n",
    "            # We reneged\n",
    "            print(f'{env.now:7.4f} {name}: RENEGED after {wait:6.3f}')\n",
    "\n",
    "\n",
    "# Setup and start the simulation\n",
    "print('Bank renege')\n",
    "random.seed(RANDOM_SEED)\n",
    "env = simpy.Environment()\n",
    "\n",
    "# Start processes and run\n",
    "counter = simpy.Resource(env, capacity=1)\n",
    "env.process(source(env, NEW_CUSTOMERS, INTERVAL_CUSTOMERS, counter))\n",
    "env.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following is from ChatGPT."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import simpy\n",
    "import random\n",
    "\n",
    "# Customer class to model the customers arriving at the system\n",
    "class Customer:\n",
    "    def __init__(self, arrival_time):\n",
    "        self.arrival_time = arrival_time\n",
    "        self.wait_time = 0\n",
    "        self.service_time = 0\n",
    "        self.system_time = 0\n",
    "\n",
    "def customer_arrivals(env, servers, sim_duration):\n",
    "    \"\"\"Handles the arrival of customers.\"\"\"\n",
    "    customer_id = 0\n",
    "    while env.now < sim_duration:\n",
    "        customer_id += 1\n",
    "        arrival_time = env.now\n",
    "        customer = Customer(arrival_time)\n",
    "        print(f\"Time {env.now:.2f}: Customer {customer_id} arrives.\")\n",
    "        env.process(customer_service(env, customer, servers, customer_id))\n",
    "        yield env.timeout(random.expovariate(l))  # Exponential inter-arrival time\n",
    "\n",
    "def customer_service(env, customer, servers, customer_id):\n",
    "    \"\"\"Simulates the service of a customer.\"\"\"\n",
    "    # Request a server\n",
    "    with servers.request() as request:\n",
    "        print(f\"Time {env.now:.2f}: Customer {customer_id} waits for a server.\")\n",
    "        yield request  # Wait for a free server\n",
    "        \n",
    "        # Customer starts service\n",
    "        wait_time = env.now - customer.arrival_time\n",
    "        customer.wait_time = wait_time\n",
    "        service_time = random.expovariate(u)  # Exponential service time\n",
    "        customer.service_time = service_time\n",
    "        print(f\"Time {env.now:.2f}: Customer {customer_id} starts service. Wait time = {wait_time:.2f}, Service time = {service_time:.2f}\")\n",
    "\n",
    "        # Simulate service time\n",
    "        yield env.timeout(service_time)\n",
    "        \n",
    "        # Customer completes service\n",
    "        customer.system_time = env.now - customer.arrival_time\n",
    "        print(f\"Time {env.now:.2f}: Customer {customer_id} finishes service. Total time in system = {customer.system_time:.2f}\")\n",
    "\n",
    "        # Store results\n",
    "        waiting_times.append(customer.wait_time)\n",
    "        system_times.append(customer.system_time)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time 0.00: Customer 1 arrives.\n",
      "Time 0.00: Customer 1 waits for a server.\n",
      "Time 0.00: Customer 1 starts service. Wait time = 0.00, Service time = 1.77\n",
      "Time 0.49: Customer 2 arrives.\n",
      "Time 0.49: Customer 2 waits for a server.\n",
      "Time 0.49: Customer 2 starts service. Wait time = 0.00, Service time = 1.74\n",
      "Time 0.55: Customer 3 arrives.\n",
      "Time 0.55: Customer 3 waits for a server.\n",
      "Time 0.68: Customer 4 arrives.\n",
      "Time 0.68: Customer 4 waits for a server.\n",
      "Time 1.01: Customer 5 arrives.\n",
      "Time 1.01: Customer 5 waits for a server.\n",
      "Time 1.28: Customer 6 arrives.\n",
      "Time 1.28: Customer 6 waits for a server.\n",
      "Time 1.37: Customer 7 arrives.\n",
      "Time 1.37: Customer 7 waits for a server.\n",
      "Time 1.39: Customer 8 arrives.\n",
      "Time 1.39: Customer 8 waits for a server.\n",
      "Time 1.77: Customer 1 finishes service. Total time in system = 1.77\n",
      "Time 1.77: Customer 3 starts service. Wait time = 1.23, Service time = 0.15\n",
      "Time 1.93: Customer 3 finishes service. Total time in system = 1.38\n",
      "Time 1.93: Customer 4 starts service. Wait time = 1.25, Service time = 3.40\n",
      "Time 2.05: Customer 9 arrives.\n",
      "Time 2.05: Customer 9 waits for a server.\n",
      "Time 2.23: Customer 2 finishes service. Total time in system = 1.74\n",
      "Time 2.23: Customer 5 starts service. Wait time = 1.22, Service time = 1.29\n",
      "Time 2.44: Customer 10 arrives.\n",
      "Time 2.44: Customer 10 waits for a server.\n",
      "Time 3.22: Customer 11 arrives.\n",
      "Time 3.22: Customer 11 waits for a server.\n",
      "Time 3.52: Customer 5 finishes service. Total time in system = 2.51\n",
      "Time 3.52: Customer 6 starts service. Wait time = 2.24, Service time = 1.63\n",
      "Time 3.91: Customer 12 arrives.\n",
      "Time 3.91: Customer 12 waits for a server.\n",
      "Time 4.00: Customer 13 arrives.\n",
      "Time 4.00: Customer 13 waits for a server.\n",
      "Time 4.31: Customer 14 arrives.\n",
      "Time 4.31: Customer 14 waits for a server.\n",
      "Time 4.32: Customer 15 arrives.\n",
      "Time 4.32: Customer 15 waits for a server.\n",
      "Time 4.47: Customer 16 arrives.\n",
      "Time 4.47: Customer 16 waits for a server.\n",
      "Time 4.59: Customer 17 arrives.\n",
      "Time 4.59: Customer 17 waits for a server.\n",
      "Time 4.81: Customer 18 arrives.\n",
      "Time 4.81: Customer 18 waits for a server.\n",
      "Time 5.04: Customer 19 arrives.\n",
      "Time 5.04: Customer 19 waits for a server.\n",
      "Time 5.15: Customer 6 finishes service. Total time in system = 3.87\n",
      "Time 5.15: Customer 7 starts service. Wait time = 3.79, Service time = 1.73\n",
      "Time 5.21: Customer 20 arrives.\n",
      "Time 5.21: Customer 20 waits for a server.\n",
      "Time 5.32: Customer 4 finishes service. Total time in system = 4.64\n",
      "Time 5.32: Customer 8 starts service. Wait time = 3.93, Service time = 0.11\n",
      "Time 5.44: Customer 8 finishes service. Total time in system = 4.05\n",
      "Time 5.44: Customer 9 starts service. Wait time = 3.39, Service time = 0.27\n",
      "Time 5.70: Customer 9 finishes service. Total time in system = 3.65\n",
      "Time 5.70: Customer 10 starts service. Wait time = 3.26, Service time = 0.03\n",
      "Time 5.73: Customer 10 finishes service. Total time in system = 3.29\n",
      "Time 5.73: Customer 11 starts service. Wait time = 2.50, Service time = 2.16\n",
      "Time 5.78: Customer 21 arrives.\n",
      "Time 5.78: Customer 21 waits for a server.\n",
      "Time 5.94: Customer 22 arrives.\n",
      "Time 5.94: Customer 22 waits for a server.\n",
      "Time 6.43: Customer 23 arrives.\n",
      "Time 6.43: Customer 23 waits for a server.\n",
      "Time 6.48: Customer 24 arrives.\n",
      "Time 6.48: Customer 24 waits for a server.\n",
      "Time 6.50: Customer 25 arrives.\n",
      "Time 6.50: Customer 25 waits for a server.\n",
      "Time 6.85: Customer 26 arrives.\n",
      "Time 6.85: Customer 26 waits for a server.\n",
      "Time 6.88: Customer 7 finishes service. Total time in system = 5.51\n",
      "Time 6.88: Customer 12 starts service. Wait time = 2.97, Service time = 0.36\n",
      "Time 7.24: Customer 12 finishes service. Total time in system = 3.33\n",
      "Time 7.24: Customer 13 starts service. Wait time = 3.24, Service time = 0.52\n",
      "Time 7.33: Customer 27 arrives.\n",
      "Time 7.33: Customer 27 waits for a server.\n",
      "Time 7.36: Customer 28 arrives.\n",
      "Time 7.36: Customer 28 waits for a server.\n",
      "Time 7.76: Customer 13 finishes service. Total time in system = 3.76\n",
      "Time 7.76: Customer 14 starts service. Wait time = 3.45, Service time = 0.36\n",
      "Time 7.89: Customer 11 finishes service. Total time in system = 4.66\n",
      "Time 7.89: Customer 15 starts service. Wait time = 3.57, Service time = 0.68\n",
      "Time 7.94: Customer 29 arrives.\n",
      "Time 7.94: Customer 29 waits for a server.\n",
      "Time 7.96: Customer 30 arrives.\n",
      "Time 7.96: Customer 30 waits for a server.\n",
      "Time 8.13: Customer 14 finishes service. Total time in system = 3.81\n",
      "Time 8.13: Customer 16 starts service. Wait time = 3.66, Service time = 0.15\n",
      "Time 8.27: Customer 16 finishes service. Total time in system = 3.80\n",
      "Time 8.27: Customer 17 starts service. Wait time = 3.68, Service time = 0.60\n",
      "Time 8.40: Customer 31 arrives.\n",
      "Time 8.40: Customer 31 waits for a server.\n",
      "Time 8.56: Customer 15 finishes service. Total time in system = 4.25\n",
      "Time 8.56: Customer 18 starts service. Wait time = 3.75, Service time = 1.36\n",
      "Time 8.62: Customer 32 arrives.\n",
      "Time 8.62: Customer 32 waits for a server.\n",
      "Time 8.88: Customer 17 finishes service. Total time in system = 4.29\n",
      "Time 8.88: Customer 19 starts service. Wait time = 3.84, Service time = 0.54\n",
      "Time 9.20: Customer 33 arrives.\n",
      "Time 9.20: Customer 33 waits for a server.\n",
      "Time 9.42: Customer 19 finishes service. Total time in system = 4.38\n",
      "Time 9.42: Customer 20 starts service. Wait time = 4.21, Service time = 0.17\n",
      "Time 9.47: Customer 34 arrives.\n",
      "Time 9.47: Customer 34 waits for a server.\n",
      "Time 9.58: Customer 35 arrives.\n",
      "Time 9.58: Customer 35 waits for a server.\n",
      "Time 9.59: Customer 20 finishes service. Total time in system = 4.38\n",
      "Time 9.59: Customer 21 starts service. Wait time = 3.81, Service time = 0.67\n",
      "Time 9.60: Customer 36 arrives.\n",
      "Time 9.60: Customer 36 waits for a server.\n",
      "Time 9.71: Customer 37 arrives.\n",
      "Time 9.71: Customer 37 waits for a server.\n",
      "Time 9.92: Customer 18 finishes service. Total time in system = 5.11\n",
      "Time 9.92: Customer 22 starts service. Wait time = 3.98, Service time = 0.03\n",
      "Time 9.96: Customer 22 finishes service. Total time in system = 4.02\n",
      "Time 9.96: Customer 23 starts service. Wait time = 3.52, Service time = 0.46\n",
      "Time 10.26: Customer 21 finishes service. Total time in system = 4.48\n",
      "Time 10.26: Customer 24 starts service. Wait time = 3.78, Service time = 0.59\n",
      "Time 10.42: Customer 23 finishes service. Total time in system = 3.98\n",
      "Time 10.42: Customer 25 starts service. Wait time = 3.92, Service time = 3.01\n",
      "Time 10.85: Customer 24 finishes service. Total time in system = 4.36\n",
      "Time 10.85: Customer 26 starts service. Wait time = 4.00, Service time = 1.93\n",
      "Time 12.78: Customer 26 finishes service. Total time in system = 5.94\n",
      "Time 12.78: Customer 27 starts service. Wait time = 5.46, Service time = 0.10\n",
      "Time 12.89: Customer 27 finishes service. Total time in system = 5.56\n",
      "Time 12.89: Customer 28 starts service. Wait time = 5.53, Service time = 1.16\n",
      "Time 13.43: Customer 25 finishes service. Total time in system = 6.93\n",
      "Time 13.43: Customer 29 starts service. Wait time = 5.49, Service time = 0.79\n",
      "Time 14.04: Customer 28 finishes service. Total time in system = 6.69\n",
      "Time 14.04: Customer 30 starts service. Wait time = 6.08, Service time = 3.81\n",
      "Time 14.21: Customer 29 finishes service. Total time in system = 6.27\n",
      "Time 14.21: Customer 31 starts service. Wait time = 5.82, Service time = 0.44\n",
      "Time 14.66: Customer 31 finishes service. Total time in system = 6.26\n",
      "Time 14.66: Customer 32 starts service. Wait time = 6.04, Service time = 0.51\n",
      "Time 15.16: Customer 32 finishes service. Total time in system = 6.55\n",
      "Time 15.16: Customer 33 starts service. Wait time = 5.96, Service time = 0.21\n",
      "Time 15.37: Customer 33 finishes service. Total time in system = 6.17\n",
      "Time 15.37: Customer 34 starts service. Wait time = 5.90, Service time = 0.13\n",
      "Time 15.50: Customer 34 finishes service. Total time in system = 6.03\n",
      "Time 15.50: Customer 35 starts service. Wait time = 5.92, Service time = 1.88\n",
      "Time 17.39: Customer 35 finishes service. Total time in system = 7.81\n",
      "Time 17.39: Customer 36 starts service. Wait time = 7.79, Service time = 0.61\n",
      "Time 17.85: Customer 30 finishes service. Total time in system = 9.89\n",
      "Time 17.85: Customer 37 starts service. Wait time = 8.15, Service time = 1.09\n",
      "Time 18.00: Customer 36 finishes service. Total time in system = 8.39\n",
      "Time 18.94: Customer 37 finishes service. Total time in system = 9.23\n",
      "\n",
      "Average waiting time: 3.95\n",
      "Average system time: 4.94\n",
      "Total customers served: 37\n"
     ]
    }
   ],
   "source": [
    "# Parameters\n",
    "l = 5  # Rate of customer arrivals (lambda)\n",
    "u = 1  # Rate of service (mu)\n",
    "m = 2  # Number of servers\n",
    "sim_duration = 10  # Simulation duration (in time units)\n",
    "\n",
    "# Lists to store results\n",
    "waiting_times = []\n",
    "system_times = []\n",
    "\n",
    "\n",
    "# Initialize the environment and server pool\n",
    "env = simpy.Environment()\n",
    "servers = simpy.Resource(env, capacity=m)\n",
    "\n",
    "# Start the arrival process\n",
    "env.process(customer_arrivals(env, servers, sim_duration))\n",
    "\n",
    "# Run the simulation\n",
    "env.run()\n",
    "\n",
    "# Output the results\n",
    "print(f\"\\nAverage waiting time: {sum(waiting_times) / len(waiting_times):.2f}\")\n",
    "print(f\"Average system time: {sum(system_times) / len(system_times):.2f}\")\n",
    "print(f\"Total customers served: {len(waiting_times)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
